[{"/var/www/frontend/src/index.tsx":"1","/var/www/frontend/src/reportWebVitals.ts":"2","/var/www/frontend/src/App.tsx":"3","/var/www/frontend/src/theme.ts":"4","/var/www/frontend/src/components/SnackbarProvider.tsx":"5","/var/www/frontend/src/routes/AppRouter.tsx":"6","/var/www/frontend/src/components/Breadcrumbs.tsx":"7","/var/www/frontend/src/components/Navbar/index.tsx":"8","/var/www/frontend/src/routes/index.tsx":"9","/var/www/frontend/src/components/Navbar/Menu.tsx":"10","/var/www/frontend/src/pages/cast-member/CastMemberForm.tsx":"11","/var/www/frontend/src/pages/genre/GenreForm.tsx":"12","/var/www/frontend/src/pages/category/CategoryForm.tsx":"13","/var/www/frontend/src/pages/cast-member/components/Form.tsx":"14","/var/www/frontend/src/components/Page.tsx":"15","/var/www/frontend/src/pages/category/components/Form.tsx":"16","/var/www/frontend/src/pages/genre/components/Form.tsx":"17","/var/www/frontend/src/components/DefaultForm.tsx":"18","/var/www/frontend/src/components/SubmitAction.tsx":"19","/var/www/frontend/src/util/vendor/yup.ts":"20","/var/www/frontend/src/util/http/cast-member-http.ts":"21","/var/www/frontend/src/util/http/category-http.ts":"22","/var/www/frontend/src/util/http/genre-http.ts":"23","/var/www/frontend/src/util/http/http-resource.ts":"24","/var/www/frontend/src/util/http/index.tsx":"25","/var/www/frontend/src/pages/genre/GenreList.tsx":"26","/var/www/frontend/src/pages/cast-member/CastMemberList.tsx":"27","/var/www/frontend/src/pages/category/CategoryList.tsx":"28","/var/www/frontend/src/pages/Dashboard.tsx":"29","/var/www/frontend/src/pages/genre/components/Table.tsx":"30","/var/www/frontend/src/pages/cast-member/components/Table.tsx":"31","/var/www/frontend/src/pages/category/components/Table.tsx":"32","/var/www/frontend/src/components/Badge.tsx":"33","/var/www/frontend/src/hooks/useFilter.ts":"34","/var/www/frontend/src/components/Table/FilterResetButton.tsx":"35","/var/www/frontend/src/components/Table/index.tsx":"36","/var/www/frontend/src/components/Table/DebouncedTableSearch.js":"37","/var/www/frontend/src/store/filter/index.ts":"38","/var/www/frontend/src/util/models.ts":"39","/var/www/frontend/src/pages/video/PageForm.tsx":"40","/var/www/frontend/src/pages/video/PageList.tsx":"41","/var/www/frontend/src/util/http/video-http.ts":"42","/var/www/frontend/src/components/Rating.tsx":"43","/var/www/frontend/src/pages/video/components/Form/index.tsx":"44","/var/www/frontend/src/pages/video/components/Form/RatingField.tsx":"45"},{"size":500,"mtime":1612739214530,"results":"46","hashOfConfig":"47"},{"size":425,"mtime":1612739214530,"results":"48","hashOfConfig":"47"},{"size":860,"mtime":1615726059623,"results":"49","hashOfConfig":"47"},{"size":3314,"mtime":1615726239163,"results":"50","hashOfConfig":"47"},{"size":1081,"mtime":1612739214526,"results":"51","hashOfConfig":"47"},{"size":603,"mtime":1612739214530,"results":"52","hashOfConfig":"47"},{"size":2826,"mtime":1612739214526,"results":"53","hashOfConfig":"47"},{"size":955,"mtime":1612739214526,"results":"54","hashOfConfig":"47"},{"size":2824,"mtime":1615743849619,"results":"55","hashOfConfig":"47"},{"size":2242,"mtime":1615744297677,"results":"56","hashOfConfig":"47"},{"size":294,"mtime":1612739214530,"results":"57","hashOfConfig":"47"},{"size":295,"mtime":1612739214530,"results":"58","hashOfConfig":"47"},{"size":413,"mtime":1612739214530,"results":"59","hashOfConfig":"47"},{"size":4792,"mtime":1612739214530,"results":"60","hashOfConfig":"47"},{"size":639,"mtime":1612739214526,"results":"61","hashOfConfig":"47"},{"size":4818,"mtime":1612739214530,"results":"62","hashOfConfig":"47"},{"size":5768,"mtime":1612739214530,"results":"63","hashOfConfig":"47"},{"size":880,"mtime":1612739214526,"results":"64","hashOfConfig":"47"},{"size":1149,"mtime":1612739214526,"results":"65","hashOfConfig":"47"},{"size":348,"mtime":1615746922600,"results":"66","hashOfConfig":"47"},{"size":176,"mtime":1612739214530,"results":"67","hashOfConfig":"47"},{"size":170,"mtime":1612739214530,"results":"68","hashOfConfig":"47"},{"size":160,"mtime":1612739214530,"results":"69","hashOfConfig":"47"},{"size":1357,"mtime":1612739214530,"results":"70","hashOfConfig":"47"},{"size":145,"mtime":1612739214530,"results":"71","hashOfConfig":"47"},{"size":837,"mtime":1612739214530,"results":"72","hashOfConfig":"47"},{"size":836,"mtime":1612739214530,"results":"73","hashOfConfig":"47"},{"size":821,"mtime":1612739214530,"results":"74","hashOfConfig":"47"},{"size":224,"mtime":1612739214530,"results":"75","hashOfConfig":"47"},{"size":8268,"mtime":1615744902862,"results":"76","hashOfConfig":"47"},{"size":8339,"mtime":1615732263397,"results":"77","hashOfConfig":"47"},{"size":5806,"mtime":1615726250671,"results":"78","hashOfConfig":"47"},{"size":666,"mtime":1612739214526,"results":"79","hashOfConfig":"47"},{"size":6999,"mtime":1615730077090,"results":"80","hashOfConfig":"47"},{"size":711,"mtime":1612739214526,"results":"81","hashOfConfig":"47"},{"size":3898,"mtime":1615726051315,"results":"82","hashOfConfig":"47"},{"size":2960,"mtime":1612739214526,"results":"83","hashOfConfig":"47"},{"size":2875,"mtime":1615730068578,"results":"84","hashOfConfig":"47"},{"size":1595,"mtime":1615744164896,"results":"85","hashOfConfig":"47"},{"size":373,"mtime":1615747662580,"results":"86","hashOfConfig":"47"},{"size":735,"mtime":1615743801439,"results":"87","hashOfConfig":"47"},{"size":160,"mtime":1615744226208,"results":"88","hashOfConfig":"47"},{"size":942,"mtime":1615747248739,"results":"89","hashOfConfig":"47"},{"size":7679,"mtime":1615749697868,"results":"90","hashOfConfig":"47"},{"size":2246,"mtime":1615748410880,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1b0aqc6",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"94"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"94"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"176"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/var/www/frontend/src/index.tsx",[],["193","194"],"/var/www/frontend/src/reportWebVitals.ts",[],"/var/www/frontend/src/App.tsx",[],"/var/www/frontend/src/theme.ts",[],"/var/www/frontend/src/components/SnackbarProvider.tsx",[],"/var/www/frontend/src/routes/AppRouter.tsx",[],"/var/www/frontend/src/components/Breadcrumbs.tsx",[],"/var/www/frontend/src/components/Navbar/index.tsx",[],"/var/www/frontend/src/routes/index.tsx",[],"/var/www/frontend/src/components/Navbar/Menu.tsx",[],"/var/www/frontend/src/pages/cast-member/CastMemberForm.tsx",[],"/var/www/frontend/src/pages/genre/GenreForm.tsx",[],"/var/www/frontend/src/pages/category/CategoryForm.tsx",[],"/var/www/frontend/src/pages/cast-member/components/Form.tsx",[],"/var/www/frontend/src/components/Page.tsx",[],"/var/www/frontend/src/pages/category/components/Form.tsx",[],"/var/www/frontend/src/pages/genre/components/Form.tsx",["195"],"import React, {useEffect, useState} from \"react\";\nimport {MenuItem, TextField} from \"@material-ui/core\";\nimport {useForm} from \"react-hook-form\";\nimport categoryHttp from \"../../../util/http/category-http\";\nimport genreHttp from \"../../../util/http/genre-http\";\nimport {useHistory, useParams} from \"react-router\";\nimport {useSnackbar} from \"notistack\";\nimport * as yup from \"../../../util/vendor/yup\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport SubmitAction from \"../../../components/SubmitAction\";\nimport {DefaultForm} from \"../../../components/DefaultForm\";\n\ninterface Genre {\n    id: string,\n    name: string,\n    categories_id: string[]\n}\n\nconst SchemaValidation = yup.object({\n    name: yup.string()\n        .label('Nome')\n        .required()\n        .max(255),\n    categories_id: yup.array()\n        .label('Categorias')\n        .required()\n}).defined();\n\n\nconst Form = () => {\n    const history = useHistory();\n    const {id} = useParams<{id: string}>();\n    const snackbar = useSnackbar();\n\n    const [categories,setCategories] = useState<Genre[]>([]);\n    const [genre,setGenre] = useState<Genre | null>(null);\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const {\n        register,\n        handleSubmit,\n        getValues,\n        setValue,\n        watch,\n        errors,\n        reset,\n        trigger\n    } = useForm<Genre>({\n        resolver: yupResolver(SchemaValidation),\n        defaultValues: {\n            categories_id: []\n        }\n    });\n\n    useEffect(() => {\n        register({name: 'categories_id'})\n    },[register])\n\n    useEffect(() => {\n       let isSubscribed = true;\n        (async () =>{\n            setLoading(true);\n            const promise = [categoryHttp.list({queryParam: {all: ''}})];\n            if(id){\n                promise.push(genreHttp.get(id))\n            }\n            try{\n                if(isSubscribed){\n                    const [categoriesResponse, genteResponse] = await Promise.all(promise);\n                    setCategories(categoriesResponse.data.data);\n                    if(id){\n                        setGenre(genteResponse.data.data);\n                        reset({\n                            ...genteResponse.data.data,\n                            categories_id: genteResponse.data.data.categories.map(category => category.id)\n                        });\n                    }\n                }\n            }catch(error){\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }finally {\n                setLoading(false);\n            }\n        })();\n        return() => {\n            isSubscribed = false;\n        }\n    },[]);\n\n    async function onSubmit(formData,event){\n        setLoading(true);\n        try{\n            const http = !genre\n                ?genreHttp.create(formData)\n                :genreHttp.update(genre.id, formData)\n            const {data} = await http;\n            snackbar.enqueueSnackbar(\n                'Gênero salvo com Sucesso',\n                {variant: 'success'}\n            )\n            setTimeout(() => {\n                event ? (\n                        id\n                            ? history.replace(`/genres/${data.data.id}/edit`)\n                            : history.push(`/genres/${data.data.id}/edit`)\n                    )\n                    :history.push('/genres')\n            })\n        }catch(error) {\n            console.log(error);\n            snackbar.enqueueSnackbar(\n                'Não é possível salvar o gênero',\n                {variant: 'error'}\n            )\n        }finally{\n            setLoading(false)\n        }\n    }\n    return (\n        <DefaultForm onSubmit={handleSubmit(onSubmit)}>\n            <TextField\n                name={\"name\"}\n                label={\"Nome\"}\n                fullWidth\n                variant={\"outlined\"}\n                inputRef={register}\n                disabled={loading}\n                error={errors.name !== undefined}\n                helperText={errors.name?.message}\n                InputLabelProps={{\n                    shrink: true\n                }}\n\n            />\n            <TextField\n                select\n                name={\"categories_id\"}\n                value={watch('categories_id')}\n                label={\"Categorias\"}\n                fullWidth\n                variant={\"outlined\"}\n                margin={\"normal\"}\n                onChange={(e) => {\n                    setValue('categories_id', e.target.value,{ shouldValidate: true })\n                }}\n                SelectProps={{\n                    multiple: true\n                }}\n                disabled={loading}\n                error={errors.categories_id !== undefined}\n               // helperText={errors.categories_id && errors.categories_id.message}\n                InputLabelProps={{\n                    shrink: true\n                }}\n            >\n                <MenuItem value=\"\">\n                    <em>Selecione uma categoria</em>\n                </MenuItem>\n                {\n                    categories.map(\n                        (category,key) => (\n                            <MenuItem key={key} value={category.id}>{category.name}</MenuItem>\n                        )\n                    )\n                }\n            </TextField>\n            <SubmitAction\n                disabledButtons={loading}\n                handleSalve={() => {\n                    trigger().then((valid) => {\n                        valid && onSubmit(getValues(), null)\n                    })\n                }\n                }\n            />\n        </DefaultForm>\n    );\n};\n\nexport default Form;","/var/www/frontend/src/components/DefaultForm.tsx",[],"/var/www/frontend/src/components/SubmitAction.tsx",[],"/var/www/frontend/src/util/vendor/yup.ts",["196","197","198","199"],"import {setLocale} from \"yup\";\n\nconst ptBR = {\n    mixed: {\n        required: '${path} é requerido',\n        notType: '${path} é inválido'\n    },\n    string: {\n        max: '${path} precisa ter no máximo ${max} caracteres'\n    },\n    number:{\n        min: '${path} precisa ser no mínimo ${min}'\n    }\n};\n\nsetLocale(ptBR);\n\nexport * from 'yup';","/var/www/frontend/src/util/http/cast-member-http.ts",[],"/var/www/frontend/src/util/http/category-http.ts",[],"/var/www/frontend/src/util/http/genre-http.ts",[],"/var/www/frontend/src/util/http/http-resource.ts",[],"/var/www/frontend/src/util/http/index.tsx",[],"/var/www/frontend/src/pages/genre/GenreList.tsx",[],"/var/www/frontend/src/pages/cast-member/CastMemberList.tsx",[],"/var/www/frontend/src/pages/category/CategoryList.tsx",[],"/var/www/frontend/src/pages/Dashboard.tsx",[],"/var/www/frontend/src/pages/genre/components/Table.tsx",["200","201","202","203","204","205","206","207","208","209"],"import React, {useEffect, useRef, useState} from 'react';\nimport MUIDataTable, {MUIDataTableColumn} from \"mui-datatables\";\nimport httpVideo from \"../../../util/http\";\nimport format from \"date-fns/format\"\nimport parseISO from \"date-fns/parseISO\"\nimport categoryHttp from \"../../../util/http/category-http\";\nimport genreHttp from \"../../../util/http/genre-http\";\nimport {useSnackbar} from \"notistack\";\nimport {Category, Genre, ListResponse} from \"../../../util/models\";\nimport useFilter from \"../../../hooks/useFilter\";\nimport * as yup from \"../../../util/vendor/yup\";\nimport {MuiThemeProvider} from \"@material-ui/core\";\nimport DefaultTable, {makeActionStyles, TableColumn} from '../../../components/Table'\nimport FilterResetButton from \"../../../components/Table/FilterResetButton\";\n\n\n\n\nconst columnsDefinition: MUIDataTableColumn[] = [\n    {\n        name: \"name\",\n        label: \"Nome\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"categories\",\n        label: \"Categorias\",\n        options: {\n            filterType: 'multiselect',\n            filterOptions: {\n                names: []\n            },\n            customBodyRender(value, tableMeta, updateValue ){\n                return value.map(value => value.name).join(', ')\n            },\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue ){\n                return <span>{format(parseISO(value),'dd/MM/yyyy')}</span>\n            },\n            filter: false\n        }\n    }\n];\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\n\nconst Table = () => {\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<Genre[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [categories, setCategories] = useState<Category[]>();\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    categories: yup.mixed()\n                        .nullable()\n                        .transform(value => {\n                            return !value || value === '' ? undefined : value.split(',');\n                        })\n                        .default(null),\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter ? {\n                    ...(\n                        debouncedState.extraFilter.categories &&\n                        {categories: debouncedState.extraFilter.categories.join(',')}\n                    )\n                } : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    categories: queryParams.get('categories')\n                }\n            }\n        }\n    });\n\n    /**\n     * Bloco para pegar o indice de categoria e depois pegar a variavele atribuir o valor\n     * e chamar no filter\n    **/\n    const indexColumnCategories = columns.findIndex(c => c.name === 'categories');\n    const columnCategories = columns[indexColumnCategories];\n    const categoriesFilterValue = filterState.extraFilter && filterState.extraFilter.categories;\n    (columnCategories.options as any).filterList = categoriesFilterValue ? categoriesFilterValue : [];\n\n\n    useEffect(() => {\n        let isSubscribed = true;\n        (async () =>{\n            try{\n                const {data} = await categoryHttp.list({queryParam: {all: ''}});\n                if(isSubscribed){\n                    (columnCategories.options as any).filterOptions.names = data.data.map(category => category.name)\n                }\n            }catch (error){\n                console.error(error);\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error',}\n                )\n            }\n\n        })();\n        return () => {\n            isSubscribed = false;\n        }\n    },[]);\n\n    useEffect(() => {\n        let isSubscribed = true;\n        (async () =>{\n            const {data} = await genreHttp.list();\n            if(isSubscribed){\n                setData(data.data)\n            }\n        })();\n        return () => {\n            isSubscribed = false;\n        }\n    },[]);\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.clearSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await genreHttp.list<ListResponse<Genre>>({\n                queryParam: {\n                    search: filterManager.clearSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.categories &&\n                        {categories: debouncedFilterState.extraFilter.categories.join(',')}\n                    )\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (genreHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n\n\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                columns={columnsDefinition}\n                data={data}\n                title={'Listagem de Gêneros'}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                options={{\n                    serverSide: true,\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList, type) => {\n                        const columnIndex = columns.findIndex(c => c.name === column);\n                        filterManager.changeExtraFilter({\n                            [column as any]: filterList[columnIndex].length ? filterList[columnIndex] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => {\n                            filterManager.resetFilter();\n                        }}/>\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n\n    );\n};\n\nexport default Table;","/var/www/frontend/src/pages/cast-member/components/Table.tsx",["210","211","212","213","214"],"import * as React from 'react';\nimport {useEffect, useState} from \"react\";\nimport format from \"date-fns/format\";\nimport parseISO from \"date-fns/parseISO\";\nimport castMemberHttp from \"../../../util/http/cast-member-http\";\nimport {CastMember, CastMemberTypeMap, ListResponse} from \"../../../util/models\";\nimport {IconButton, MuiThemeProvider} from \"@material-ui/core\";\nimport {Link} from \"react-router-dom\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DefaultTable, {makeActionStyles, TableColumn, MuiDataTableRefComponent} from '../../../components/Table';\nimport {useSnackbar} from \"notistack\";\nimport {useRef} from \"react\";\nimport useFilter from \"../../../hooks/useFilter\";\nimport FilterResetButton from \"../../../components/Table/FilterResetButton\";\nimport * as yup from '../../../util/vendor/yup';\nimport {invert} from 'lodash';\n\nconst castMemberNames = Object.values(CastMemberTypeMap);\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: 'id',\n        label: 'ID',\n        width: '30%',\n        options: {\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"43%\",\n        options: {\n            filter: false\n        }\n    },\n    {\n        name: \"type\",\n        label: \"Tipo\",\n        width: '4%',\n        options: {\n            filterOptions: {\n                names: castMemberNames\n            },\n            customBodyRender: (value, tableMeta, updateValue) => { //typescript any\n                return CastMemberTypeMap[value];\n            },\n        }\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            filter: false,\n            customBodyRender(value, tableMeta, updateValue) {\n                return <span>{format(parseISO(value), 'dd/MM/yyyy')}</span>\n            }\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            filter: false,\n            sort: false,\n            customBodyRender: (value, tableMeta) => {\n                return (\n                    <span>\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/cast-members/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <EditIcon/>\n                    </IconButton>\n                </span>\n                )\n            }\n        }\n    }\n];\nconst debounceTime = 300;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 15;\nconst rowsPerPageOptions = [15, 25, 50];\nconst Table = () => {\n\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data, setData] = useState<CastMember[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n    const tableRef = useRef() as React.MutableRefObject<MuiDataTableRefComponent>;\n\n    const {\n        columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords,\n    } = useFilter({\n        columns: columnsDefinition,\n        debounceTime: debounceTime,\n        rowsPerPage,\n        rowsPerPageOptions,\n        extraFilter: {\n            createValidationSchema: () => {\n                return yup.object().shape({\n                    type: yup.string()\n                        .nullable()\n                        .transform(value => {\n                            return !value || !castMemberNames.includes(value) ? undefined : value;\n                        })\n                        .default(null)\n                })\n            },\n            formatSearchParams: (debouncedState) => {\n                return debouncedState.extraFilter\n                    ? {\n                        ...(\n                            debouncedState.extraFilter.type &&\n                            {type: debouncedState.extraFilter.type}\n                        ),\n                    }\n                    : undefined\n            },\n            getStateFromURL: (queryParams) => {\n                return {\n                    type: queryParams.get('type')\n                }\n            }\n        }\n    });\n    //?type=Diretor\n    const indexColumnType = columns.findIndex(c => c.name === 'type');\n    const columnType = columns[indexColumnType];\n    const typeFilterValue = filterState.extraFilter && filterState.extraFilter.type as never;\n    (columnType.options as any).filterList = typeFilterValue ? [typeFilterValue] : [];\n\n    const serverSideFilterList = columns.map(column => []);\n    if (typeFilterValue) {\n        serverSideFilterList[indexColumnType] = [typeFilterValue];\n    }\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    }, [\n        filterManager.clearSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order,\n        // Incluido esse Json para não chamar getData desnecessário.\n        JSON.stringify(debouncedFilterState.extraFilter)\n    ]);\n\n    async function getData() {\n        setLoading(true);\n        try {\n            const {data} = await castMemberHttp.list<ListResponse<CastMember>>({\n                queryParam: {\n                    search: filterManager.clearSearchText(debouncedFilterState.search),\n                    page: debouncedFilterState.pagination.page,\n                    per_page: debouncedFilterState.pagination.per_page,\n                    sort: debouncedFilterState.order.sort,\n                    dir: debouncedFilterState.order.dir,\n                    ...(\n                        debouncedFilterState.extraFilter &&\n                        debouncedFilterState.extraFilter.type &&\n                        {type: invert(CastMemberTypeMap)[debouncedFilterState.extraFilter.type]}\n                    )\n                }\n            });\n            if (subscribed.current) {\n                setData(data.data);\n                setTotalRecords(data.meta.total);\n            }\n        } catch (error) {\n            console.error(error);\n            if (castMemberHttp.isCancelledRequest(error)) {\n                return;\n            }\n            snackbar.enqueueSnackbar(\n                'Não foi possível carregar as informações',\n                {variant: 'error',}\n            )\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                title=\"\"\n                columns={columns}\n                data={data}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                options={{\n                    serverSide: true,\n                    responsive: \"vertical\",\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    onFilterChange: (column, filterList, type) => {\n                        const columnIndex = columns.findIndex(c => c.name === column);\n                        filterManager.changeExtraFilter({\n                            [column as any]: filterList[columnIndex].length ? filterList[columnIndex][0] : null\n                        })\n                    },\n                    customToolbar: () => (\n                        <FilterResetButton\n                            handleClick={() => filterManager.resetFilter()}\n                        />\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;\n","/var/www/frontend/src/pages/category/components/Table.tsx",["215","216","217","218","219"],"import React, {useEffect, useReducer, useRef, useState} from 'react';\nimport format from \"date-fns/format\"\nimport parseISO from \"date-fns/parseISO\"\nimport categoryHttp from \"../../../util/http/category-http\";\nimport {BadgeYes,BadgeNo} from '../../../components/Badge'\nimport {Category, ListResponse} from \"../../../util/models\";\nimport DefaultTable, {makeActionStyles, TableColumn} from '../../../components/Table'\nimport {useSnackbar} from \"notistack\";\nimport {IconButton, MuiThemeProvider} from \"@material-ui/core\";\nimport {Edit} from \"@material-ui/icons\";\nimport {Link} from \"react-router-dom\";\nimport FilterResetButton from \"../../../components/Table/FilterResetButton\";\nimport useFilter from \"../../../hooks/useFilter\";\nimport {Creators} from '../../../store/filter/index'\n\nconst columnsDefinition: TableColumn[] = [\n    {\n        name: \"id\",\n        label: \"Id\",\n        width: \"33%\",\n        options:{\n            sort: false,\n            filter: false\n        }\n    },\n    {\n        name: \"name\",\n        label: \"Nome\",\n        width: \"40%\"\n    },\n    {\n        name: \"is_active\",\n        label: \"Ativo?\",\n        options: {\n            customBodyRender(value, tableMeta, updateValue ){\n                return value ? <BadgeYes/> : <BadgeNo/>\n            },\n            filterOptions: {\n                names: ['Sim','Não']\n            },\n        },\n        width: '4%'\n    },\n    {\n        name: \"created_at\",\n        label: \"Criado em\",\n        width: '10%',\n        options: {\n            customBodyRender(value, tableMeta, updateValue ){\n                return <span>{format(parseISO(value),'dd/MM/yyyy')}</span>\n            },\n            filter: false\n        }\n    },\n    {\n        name: \"actions\",\n        label: \"Ações\",\n        width: '13%',\n        options: {\n            customBodyRender(value, tableMeta, updateValue): JSX.Element {\n                return(\n                    <IconButton\n                        color={'secondary'}\n                        component={Link}\n                        to={`/categorias/${tableMeta.rowData[0]}/edit`}\n                    >\n                        <Edit/>\n                    </IconButton>\n                )\n            },\n            filter: false\n        }\n\n    }\n];\n\nconst debounceTime = 200;\nconst debouncedSearchTime = 300;\nconst rowsPerPage = 10;\nconst rowsPerPageOptions =  [10,25,50];\n\nconst Table = () => {\n    const snackbar = useSnackbar();\n    const subscribed = useRef(true);\n    const [data,setData] = useState<Category[]>([]);\n    const [loading, setLoading] = useState<boolean>(false);\n     const {\n         debouncedFilterState,\n         filterManager,\n         filterState,\n         dispatch,\n         totalRecords,\n         setTotalRecords\n     } = useFilter({\n         columns: columnsDefinition,\n         debounceTime: debounceTime,\n         rowsPerPage,\n         rowsPerPageOptions\n     });\n\n\n    useEffect(() => {\n        subscribed.current = true;\n        filterManager.pushHistory();\n        getData();\n        return () => {\n            subscribed.current = false;\n        }\n    },[\n        filterManager.clearSearchText(debouncedFilterState.search),\n        debouncedFilterState.pagination.page,\n        debouncedFilterState.pagination.per_page,\n        debouncedFilterState.order\n    ]);\n\n\n    async function getData(){\n        setLoading(true);\n        try {\n            const {data} = await categoryHttp.list<ListResponse<Category>>({\n                queryParam: {\n                    search: filterManager.clearSearchText(filterState.search),\n                    page: filterState.pagination.page,\n                    per_page: filterState.pagination.per_page,\n                    sort: filterState.order.sort,\n                    dir: filterState.order.dir\n                }\n            });\n            if(subscribed.current){\n                setData(data.data)\n                setTotalRecords(data.meta.total)\n            }\n            }catch (error){\n                console.error(error);\n                if(categoryHttp.isCancelledRequest(error)){\n                    return;\n                }\n                snackbar.enqueueSnackbar(\n                    'Não foi possível carregar as informações',\n                    {variant: 'error'}\n                )\n            }finally {\n                setLoading(false)\n            }\n        }\n\n\n\n        return (\n        <MuiThemeProvider theme={makeActionStyles(columnsDefinition.length - 1)}>\n            <DefaultTable\n                columns={columnsDefinition}\n                data={data}\n                title={'Listagem de Categorias'}\n                loading={loading}\n                debouncedSearchTime={debouncedSearchTime}\n                options={{\n                    serverSide: true,\n                    searchText: filterState.search as any,\n                    page: filterState.pagination.page - 1,\n                    rowsPerPage: filterState.pagination.per_page,\n                    rowsPerPageOptions,\n                    count: totalRecords,\n                    customToolbar: () => (\n                        <FilterResetButton handleClick={() => {\n                          filterManager.resetFilter();\n                            // dispatch(Creators.setReset())\n                        }}/>\n                    ),\n                    onSearchChange: (value) => filterManager.changeSearch(value),\n                    onChangePage: (page) => filterManager.changePage(page),\n                    onChangeRowsPerPage: (perPage) => filterManager.changeRowsPerPage(perPage),\n                    onColumnSortChange: (changedColumn: string, direction: string) =>\n                        filterManager.changeColumnSort(changedColumn, direction)\n                }}\n            />\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;","/var/www/frontend/src/components/Badge.tsx",[],"/var/www/frontend/src/hooks/useFilter.ts",["220"]," import {Dispatch, Reducer, useEffect, useReducer, useState} from \"react\";\nimport reducer, {Creators} from \"../store/filter\";\nimport {MUIDataTableColumn} from \"mui-datatables\";\nimport {State as FilterState, Action as FilterActions} from \"../store/filter/types\";\nimport {useDebounce} from \"use-debounce\";\nimport {useHistory} from 'react-router';\nimport {History} from 'history';\nimport {isEqual } from 'lodash';\nimport * as yup from '../util/vendor/yup';\n\ninterface FilterManageOptions{\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    debounceTime: number;\n    history: History;\n    extraFilter?: ExtraFilter;\n}\n\ninterface ExtraFilter{\n    getStateFromURL: (queryParams: URLSearchParams) => any,\n    formatSearchParams: (debouncedState: FilterState) => any,\n    createValidationSchema: () => any\n}\n\ninterface UseFilterOptions extends Omit<FilterManageOptions,'history'>{\n\n}\n\nexport default function useFilter(options: UseFilterOptions){\n    const history = useHistory();\n    const filterManager = new FilterManager({...options, history});\n    const INITIAL_STATE = filterManager.getStateFromURL();\n    const [filterState, dispatch] = useReducer<Reducer<FilterState, FilterActions>>(reducer,INITIAL_STATE);\n    const [totalRecords, setTotalRecords] = useState<number>(0);\n    const [debouncedFilterState] = useDebounce(filterState,options.debounceTime);\n\n\n    useEffect(() => {\n        filterManager.replaceHistory();\n    },[])\n\n\n    filterManager.state = filterState;\n    filterManager.dispatch = dispatch;\n    return{\n        columns: filterManager.columns,\n        filterManager,\n        filterState,\n        debouncedFilterState,\n        dispatch,\n        totalRecords,\n        setTotalRecords\n    }\n}\n\nexport class FilterManager{\n\n    schema;\n    state: FilterState = null as any;\n    dispatch: Dispatch<FilterActions> = null as any;\n    columns: MUIDataTableColumn[];\n    rowsPerPage: number;\n    rowsPerPageOptions: number[];\n    history: History;\n    extraFilter?: ExtraFilter;\n\n\n    constructor(options: FilterManageOptions) {\n        const {columns, rowsPerPage, rowsPerPageOptions, history, extraFilter} = options;\n        this.columns = columns;\n        this.rowsPerPage = rowsPerPage;\n        this.rowsPerPageOptions = rowsPerPageOptions;\n        this.history = history;\n        this.extraFilter = extraFilter;\n        this.createValidationSchema();\n    }\n\n    changeSearch(value){\n        this.dispatch(Creators.setSearch({search: value}));\n    }\n\n    changePage(page){\n        this.dispatch(Creators.setPage({page: page + 1}));\n    }\n\n    changeRowsPerPage(perPage){\n        this.dispatch(Creators.setPerPage({per_page: perPage}))\n    }\n\n    changeColumnSort(changedColumn: string, direction: string){\n        this.dispatch(Creators.setOrder({\n            dir: direction,\n            sort: changedColumn\n        }))\n    }\n\n    changeExtraFilter(data) { //{type: 'Diretor'}\n        this.dispatch(Creators.updateExtraFilter(data));\n    }\n\n\n    resetFilter(){\n        const INITIAL_STATE = {\n            ...this.schema.cast({}),\n            search: {value: null, update: true}\n        };\n        this.dispatch(Creators.setReset({\n            state: INITIAL_STATE\n        }));\n    }\n\n\n    clearSearchText(text){\n        let newText = text;\n        if(text && text.value !== undefined){\n            newText = text.value;\n        }\n        return newText;\n    }\n\n    replaceHistory(){\n        this.history.replace({\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state: this.state\n        })\n    }\n\n    pushHistory(){\n        const newLocation = {\n            pathname: this.history.location.pathname,\n            search: \"?\" + new URLSearchParams(this.formatSearchParams() as any),\n            state:{\n                ...this.state,\n                search: this.clearSearchText(this.state.search)\n            }\n        }\n        const oldState = this.history.location.state;\n        const nextState = this.state;\n        if(isEqual(oldState, nextState)){\n            return;\n        }\n\n        this.history.push(newLocation);\n    }\n\n    private formatSearchParams(){\n       const search = this.clearSearchText(this.state.search);\n       return {\n           ...(search && search !== '' && {search: search}),\n           ...(this.state.pagination.page !== 1 && {page: this.state.pagination.page}),\n           ...(this.state.pagination.per_page !== 15 && {per_page: this.state.pagination.per_page}),\n           ...(this.state.order.sort && {\n               sort: this.state.order.sort,\n               dir: this.state.order.dir\n           }),\n           ...(this.extraFilter && this.extraFilter.formatSearchParams(this.state))\n       }\n    }\n\n    getStateFromURL(){\n        const queryParams = new URLSearchParams(this.history.location.search.substr(1));\n        return this.schema.cast({\n            search: queryParams.get('search'),\n            pagination: {\n                page: queryParams.get('page'),\n                per_page: queryParams.get('per_page')\n            },\n            order:{\n                sort: queryParams.get('sort'),\n                dir: queryParams.get('dir')\n            },\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.getStateFromURL(queryParams)\n                }\n            )\n        })\n    }\n\n    private createValidationSchema(){\n        this.schema = yup.object().shape({\n            search: yup.string()\n                .transform(value => !value ? undefined : value)\n                .default(''),\n            pagination: yup.object().shape({\n                page: yup.number()\n                    .transform(value => isNaN(value) || parseInt(value) < 1 ? undefined : value)\n                    .default(1),\n                per_page: yup.number()\n                    .oneOf(this.rowsPerPageOptions)\n                    .transform(value => isNaN(value) ? undefined : value)\n                    .default(this.rowsPerPage)\n            }),\n            order: yup.object().shape({\n                sort: yup.string()\n                    .nullable()\n                    .transform(value => {\n                        const columnsName = this.columns\n                            .filter(column => !column.options || column.options.sort !== false)\n                            .map(column => column.name);\n                        return columnsName.includes(value) ? value : undefined;\n                    })\n                    .default(null),\n                dir: yup.string()\n                    .nullable()\n                    .transform(value => !value || !['asc','desc'].includes(value.toLowerCase()) ? undefined : value)\n                    .default(null)\n            }),\n            ...(\n                this.extraFilter && {\n                    extraFilter: this.extraFilter.createValidationSchema()\n                }\n            )\n        })\n    }\n}","/var/www/frontend/src/components/Table/FilterResetButton.tsx",["221"],"import React from 'react';\nimport {IconButton, Tooltip} from \"@material-ui/core\";\nimport {ClearAll} from \"@material-ui/icons\";\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles(theme => ({\n    iconButton: (theme as any).overrides.MUIDataTableToolbar.icon\n}))\n\ninterface FilterResetButton {\n    handleClick: () => void\n}\n\nconst FilterResetButton: React.FC<FilterResetButton> = (props) => {\n    const classes = useStyles();\n    return (\n        <Tooltip title={'Limpar Busca'}>\n            <IconButton className={classes.iconButton} onClick={props.handleClick}>\n                <ClearAll/>\n            </IconButton>\n        </Tooltip>\n    );\n};\n\nexport default FilterResetButton;","/var/www/frontend/src/components/Table/index.tsx",["222"],"import * as React from 'react';\nimport MUIDataTable, {MUIDataTableColumn, MUIDataTableOptions, MUIDataTableProps} from \"mui-datatables\";\nimport {merge,omit, cloneDeep} from 'lodash';\nimport {useTheme, Theme, MuiThemeProvider, debounce} from \"@material-ui/core\";\nimport DebouncedTableSearch from \"./DebouncedTableSearch\";\n\n\n\nexport interface TableColumn extends MUIDataTableColumn{\n    width?: string\n}\n\nexport interface MuiDataTableRefComponent{\n    changePage: (page: number) => void;\n    changeRowsPerPage: (rowsPerPage: number) => void;\n}\n\n\nconst makeDefaultOptions = (debauncedSearchTime?): MUIDataTableOptions => ({\n    print: false,\n    download: false,\n    responsive: 'simple',\n    textLabels: {\n        body: {\n            noMatch: 'Nenhum registro encontrado',\n            toolTip: 'Classificar'\n        },\n        pagination: {\n            next: 'Próximo',\n            previous: 'Anterior',\n            rowsPerPage: 'Por página',\n            displayRows: 'de'\n        },\n        toolbar: {\n            search: 'Busca',\n            downloadCsv: 'Download CSV',\n            print: 'Imprimir',\n            viewColumns: 'Ver Colunas',\n            filterTable: 'Filtrar tabela'\n        },\n        filter: {\n            all: 'Todos',\n            title: 'Filtros',\n            reset: 'Limpar'\n        },\n        viewColumns: {\n            title: 'Ver Colunas',\n            titleAria: 'Ver/Esconder'\n        },\n        selectedRows: {\n            delete: 'Excluir',\n            deleteAria: 'Excluir registros selecionados',\n            text: 'registro(s) selecionados'\n        }\n    },\n    customSearchRender: (\n        searchText: string,\n        handleSearch: any,\n        hideSearch: any,\n        options: any\n    ) => {\n        return <DebouncedTableSearch\n            searchText={searchText}\n            onSearch={handleSearch}\n            onHide={hideSearch}\n            options={options}\n            debouceTime={debauncedSearchTime}\n        />\n    }\n})\n\ninterface TableProps extends MUIDataTableProps{\n    columns: TableColumn[];\n    loading?: boolean;\n    debouncedSearchTime?: number;\n\n}\n\n\nconst Table: React.FC<TableProps> = (props) => {\n\n    function extractMuiDataTableColumns(columns: TableColumn[]): Pick<TableColumn, never>[]{\n        setColumnsWithColumns(columns);\n        return columns.map(column => omit(column, 'width'));\n    }\n\n    function setColumnsWithColumns(columns: TableColumn[]){\n        columns.forEach((columns,key) => {\n            if(columns.width){\n                const overrides = theme.overrides as any;\n                overrides.MUIDataTableHeadCell.fixedHeader[`&:nth-child(${key +2})`] = {\n                    width: columns.width\n                }\n            }\n        })\n    }\n\n\n    function getOriginalMuiDataTableProps(){\n        return omit(newProps,'loading');\n    }\n\n    function applyLoading(){\n        const textLabels = (newProps.options as any).textLabels;\n        textLabels.body.noMatch = newProps.loading === true\n        ? 'Carregando...' : textLabels.body.noMatch\n    }\n\n    const defaultOptions = makeDefaultOptions(props.debouncedSearchTime)\n    const theme = cloneDeep<Theme>(useTheme());\n    const newProps = merge(\n        {options: cloneDeep(defaultOptions)},\n        props,\n        {columns: extractMuiDataTableColumns(props.columns)}\n    );\n\n    applyLoading();\n    getOriginalMuiDataTableProps();\n\n    return (\n        <MuiThemeProvider theme={theme}>\n            <MUIDataTable {...newProps}/>\n        </MuiThemeProvider>\n    );\n};\n\nexport default Table;\n\nexport function makeActionStyles(column){\n    return theme => {\n        const copyTheme = cloneDeep(theme);\n        const selector = `&[data-testid^=\"MuiDataTableBodyCell-${column}\"]`;\n        (copyTheme.overrides as any).MUIDataTableBodyCell.root[selector] = {\n            paddingTop: '0px',\n            paddingBottom: '0px'\n        }\n        return copyTheme;\n    }\n}","/var/www/frontend/src/components/Table/DebouncedTableSearch.js",["223","224"],"import React, {useCallback, useEffect, useState} from 'react';\nimport Grow from '@material-ui/core/Grow';\nimport TextField from '@material-ui/core/TextField';\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {debounce} from 'lodash';\n\n\nconst useStyles = makeStyles(\n    theme => ({\n        main: {\n            display: 'flex',\n            flex: '1 0 auto',\n        },\n        searchIcon: {\n            color: theme.palette.text.secondary,\n            marginTop: '10px',\n            marginRight: '8px',\n        },\n        searchText: {\n            flex: '0.8 0',\n        },\n        clearIcon: {\n            '&:hover': {\n                color: theme.palette.error.main,\n            },\n        },\n    }),\n    { name: 'MUIDataTableSearch' },\n);\n\nconst DebouncedTableSearch = ({ options, searchText, onSearch, onHide, debouceTime }) => {\n    const classes = useStyles();\n    const [text, setText] = useState(searchText);\n    let value = text;\n\n    const dispatchOnSearch = useCallback(debounce(value => onSearch(value),debouceTime),[]);\n\n    useEffect(() => {\n        dispatchOnSearch(text);\n    },[text,dispatchOnSearch])\n\n    useEffect(() => {\n        if(searchText && searchText.value !== undefined)\n        {\n            const value = searchText.value;\n            if(value){\n                onSearch(value);\n            }else{\n                try{\n                    onHide();\n                }catch (e){\n\n                }\n            }\n        }\n    },[searchText, onSearch])\n\n\n    const handleTextChange = event => {\n        const value = event.target.value;\n        setText(value);\n    };\n\n    const onKeyDown = event => {\n        if (event.key === 'Escape') {\n            onHide();\n        }\n    };\n\n    return (\n        <Grow appear in={true} timeout={300}>\n            <div className={classes.main}>\n                <SearchIcon className={classes.searchIcon} />\n                <TextField\n                    className={classes.searchText}\n                    autoFocus={true}\n                    InputProps={{\n                        'data-test-id': options.textLabels.toolbar.search,\n                    }}\n                    inputProps={{\n                        'aria-label': options.textLabels.toolbar.search,\n                    }}\n                    value={value || ''}\n                    onKeyDown={onKeyDown}\n                    onChange={handleTextChange}\n                    fullWidth={true}\n                    placeholder={options.searchPlaceholder}\n                    {...(options.searchProps ? options.searchProps : {})}\n                />\n                <IconButton className={classes.clearIcon} onClick={onHide}>\n                    <ClearIcon />\n                </IconButton>\n            </div>\n        </Grow>\n    );\n};\n\nexport default DebouncedTableSearch;\n",["225","226"],"/var/www/frontend/src/store/filter/index.ts",[],"/var/www/frontend/src/util/models.ts",[],"/var/www/frontend/src/pages/video/PageForm.tsx",[],"/var/www/frontend/src/pages/video/PageList.tsx",[],"/var/www/frontend/src/util/http/video-http.ts",[],"/var/www/frontend/src/components/Rating.tsx",[],"/var/www/frontend/src/pages/video/components/Form/index.tsx",["227","228","229"],"/var/www/frontend/src/pages/video/components/Form/RatingField.tsx",[],{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","severity":1,"message":"235","line":92,"column":7,"nodeType":"236","endLine":92,"endColumn":9,"suggestions":"237"},{"ruleId":"238","severity":1,"message":"239","line":5,"column":19,"nodeType":"240","messageId":"241","endLine":5,"endColumn":40},{"ruleId":"238","severity":1,"message":"239","line":6,"column":18,"nodeType":"240","messageId":"241","endLine":6,"endColumn":38},{"ruleId":"238","severity":1,"message":"239","line":9,"column":14,"nodeType":"240","messageId":"241","endLine":9,"endColumn":63},{"ruleId":"238","severity":1,"message":"239","line":12,"column":14,"nodeType":"240","messageId":"241","endLine":12,"endColumn":52},{"ruleId":"242","severity":1,"message":"243","line":2,"column":8,"nodeType":"244","messageId":"245","endLine":2,"endColumn":20},{"ruleId":"242","severity":1,"message":"246","line":3,"column":8,"nodeType":"244","messageId":"245","endLine":3,"endColumn":17},{"ruleId":"242","severity":1,"message":"247","line":13,"column":41,"nodeType":"244","messageId":"245","endLine":13,"endColumn":52},{"ruleId":"242","severity":1,"message":"248","line":61,"column":12,"nodeType":"244","messageId":"245","endLine":61,"endColumn":22},{"ruleId":"242","severity":1,"message":"249","line":61,"column":24,"nodeType":"244","messageId":"245","endLine":61,"endColumn":37},{"ruleId":"242","severity":1,"message":"250","line":68,"column":9,"nodeType":"244","messageId":"245","endLine":68,"endColumn":17},{"ruleId":"234","severity":1,"message":"251","line":133,"column":7,"nodeType":"236","endLine":133,"endColumn":9,"suggestions":"252"},{"ruleId":"234","severity":1,"message":"253","line":155,"column":8,"nodeType":"236","endLine":161,"endColumn":6,"suggestions":"254"},{"ruleId":"234","severity":1,"message":"255","line":156,"column":9,"nodeType":"256","endLine":156,"endColumn":67},{"ruleId":"234","severity":1,"message":"255","line":160,"column":9,"nodeType":"256","endLine":160,"endColumn":57},{"ruleId":"242","severity":1,"message":"257","line":95,"column":11,"nodeType":"244","messageId":"245","endLine":95,"endColumn":19},{"ruleId":"242","severity":1,"message":"250","line":102,"column":9,"nodeType":"244","messageId":"245","endLine":102,"endColumn":17},{"ruleId":"234","severity":1,"message":"253","line":156,"column":8,"nodeType":"236","endLine":163,"endColumn":6,"suggestions":"258"},{"ruleId":"234","severity":1,"message":"255","line":157,"column":9,"nodeType":"256","endLine":157,"endColumn":67},{"ruleId":"234","severity":1,"message":"255","line":162,"column":9,"nodeType":"256","endLine":162,"endColumn":57},{"ruleId":"242","severity":1,"message":"259","line":1,"column":27,"nodeType":"244","messageId":"245","endLine":1,"endColumn":37},{"ruleId":"242","severity":1,"message":"260","line":14,"column":9,"nodeType":"244","messageId":"245","endLine":14,"endColumn":17},{"ruleId":"242","severity":1,"message":"250","line":91,"column":10,"nodeType":"244","messageId":"245","endLine":91,"endColumn":18},{"ruleId":"234","severity":1,"message":"253","line":109,"column":7,"nodeType":"236","endLine":114,"endColumn":6,"suggestions":"261"},{"ruleId":"234","severity":1,"message":"255","line":110,"column":9,"nodeType":"256","endLine":110,"endColumn":67},{"ruleId":"234","severity":1,"message":"262","line":41,"column":7,"nodeType":"236","endLine":41,"endColumn":9,"suggestions":"263"},{"ruleId":"264","severity":1,"message":"265","line":15,"column":7,"nodeType":"244","messageId":"266","endLine":15,"endColumn":53},{"ruleId":"242","severity":1,"message":"267","line":4,"column":44,"nodeType":"244","messageId":"245","endLine":4,"endColumn":52},{"ruleId":"234","severity":1,"message":"268","line":39,"column":30,"nodeType":"244","endLine":39,"endColumn":41},{"ruleId":"234","severity":1,"message":"269","line":59,"column":7,"nodeType":"236","endLine":59,"endColumn":29,"suggestions":"270"},{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"242","severity":1,"message":"271","line":13,"column":8,"nodeType":"244","messageId":"245","endLine":13,"endColumn":14},{"ruleId":"242","severity":1,"message":"272","line":50,"column":9,"nodeType":"244","messageId":"245","endLine":50,"endColumn":18},{"ruleId":"234","severity":1,"message":"235","line":103,"column":8,"nodeType":"236","endLine":103,"endColumn":10,"suggestions":"273"},"no-native-reassign",["274"],"no-negated-in-lhs",["275"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id', 'reset', and 'snackbar'. Either include them or remove the dependency array.","ArrayExpression",["276"],"no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","@typescript-eslint/no-unused-vars","'MUIDataTable' is defined but never used.","Identifier","unusedVar","'httpVideo' is defined but never used.","'TableColumn' is defined but never used.","'categories' is assigned a value but never used.","'setCategories' is assigned a value but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'columnCategories.options' and 'snackbar'. Either include them or remove the dependency array.",["277"],"React Hook useEffect has missing dependencies: 'filterManager' and 'getData'. Either include them or remove the dependency array.",["278"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","CallExpression","'tableRef' is assigned a value but never used.",["279"],"'useReducer' is defined but never used.","'Creators' is defined but never used.",["280"],"React Hook useEffect has a missing dependency: 'filterManager'. Either include it or remove the dependency array.",["281"],"@typescript-eslint/no-redeclare","'FilterResetButton' is already defined.","redeclared","'debounce' is defined but never used.","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","React Hook useEffect has a missing dependency: 'onHide'. Either include it or remove the dependency array. If 'onHide' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["282"],"'Rating' is defined but never used.","'formState' is assigned a value but never used.",["283"],"no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"288","fix":"290"},{"desc":"288","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"284","fix":"296"},"Update the dependencies array to be: [id, reset, snackbar]",{"range":"297","text":"298"},"Update the dependencies array to be: [columnCategories.options, snackbar]",{"range":"299","text":"300"},"Update the dependencies array to be: [debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",{"range":"301","text":"302"},{"range":"303","text":"302"},{"range":"304","text":"302"},"Update the dependencies array to be: [filterManager]",{"range":"305","text":"306"},"Update the dependencies array to be: [searchText, onSearch, onHide]",{"range":"307","text":"308"},{"range":"309","text":"298"},[2787,2789],"[id, reset, snackbar]",[4401,4403],"[columnCategories.options, snackbar]",[4900,5164],"[debouncedFilterState.pagination.page, debouncedFilterState.pagination.per_page, debouncedFilterState.order, filterManager, getData]",[4880,5213],[3072,3278],[1472,1474],"[filterManager]",[1625,1647],"[searchText, onSearch, onHide]",[2868,2870]]